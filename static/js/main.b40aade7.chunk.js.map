{"version":3,"sources":["data.js","TravelPanel.js","App.js","serviceWorker.js","index.js"],"names":["exports","data","name","blurb","location","lat","lng","date","start","end","photos","src","thumbnail","thumnailHeight","thumbnailWidth","renderTravel","destination","className","Date","toLocaleDateString","id","enableImageSelection","images","TravelPanel","props","selectedTravel","App","setTravel","setState","prevState","center","state","googleMapsApiKey","mapContainerStyle","width","height","zoom","this","map","marker","key","title","position","onClick","React","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b40aade7.chunk.js","sourcesContent":["exports.data = [\r\n    {\r\n        name: \"Boston, MA\",\r\n        blurb: \"I went to Boston, MA to explore the city and attend Shine 2019 (a Super Smash Bros. Tournament).\",\r\n        location: {\r\n            lat: 42.361145,\r\n            lng: -71.057083\r\n        },\r\n        date: {\r\n            start: \"08/22/19\",\r\n            end: \"08/26/19\"\r\n        },\r\n        photos: [\r\n            {\r\n                src: \"photos/boston1.jpg\",\r\n                thumbnail: \"photos/boston1.jpg\",\r\n                thumnailHeight: 4,\r\n                thumbnailWidth: 3\r\n            },\r\n            {\r\n                src: \"photos/boston2.jpg\",\r\n                thumbnail: \"photos/boston2.jpg\",\r\n                thumnailHeight: 4,\r\n                thumbnailWidth: 3\r\n            },\r\n            {\r\n                src: \"photos/boston1.jpg\",\r\n                thumbnail: \"photos/boston3.jpg\",\r\n                thumnailHeight: 4,\r\n                thumbnailWidth: 3\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        name: \"Las Vegas, NV\",\r\n        blurb: \"I was flown out to GroceryShop 2019 by IBM to present a hackathon entry!\",\r\n        location: {\r\n            lat: 36.114647,\r\n            lng: -115.172813\r\n        },\r\n        date: {\r\n            start: \"09/15/19\",\r\n            end: \"09/18/19\"\r\n        },\r\n        photos: [\r\n            {\r\n                src: \"photos/vegas1.jpg\",\r\n                thumbnail: \"photos/vegas1.jpg\",\r\n                thumbnailWidth: 4,\r\n                thumnailHeight: 3\r\n            },\r\n            {\r\n                src: \"photos/vegas2.jpg\",\r\n                thumbnail: \"photos/vegas2.jpg\",\r\n                thumbnailWidth: 3,\r\n                thumnailHeight: 4\r\n            },\r\n            {\r\n                src: \"photos/vegas3.jpg\",\r\n                thumbnail: \"photos/vegas3.jpg\",\r\n                thumbnailWidth: 4,\r\n                thumnailHeight: 3\r\n            },\r\n            {\r\n                src: \"photos/vegas4.jpg\",\r\n                thumbnail: \"photos/vegas4.jpg\",\r\n                thumbnailWidth: 4,\r\n                thumnailHeight: 3\r\n            },\r\n            {\r\n                src: \"photos/vegas5.jpg\",\r\n                thumbnail: \"photos/vegas5.jpg\",\r\n                thumbnailWidth: 4,\r\n                thumnailHeight: 3\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        name: \"San Diego, CA\",\r\n        blurb: \"I flew out to explore San Diego and check TwitchCon for the weekend.\",\r\n        location: {\r\n            lat: 32.715736,\r\n            lng: -117.161087\r\n        },\r\n        date: {\r\n            start: \"09/28/19\",\r\n            end: \"09/30/19\"\r\n        },\r\n        photos: [\r\n            {\r\n                src: \"photos/sd1.jpg\",\r\n                thumbnail: \"photos/sd1.jpg\",\r\n                thumbnailWidth: 4,\r\n                thumnailHeight: 3\r\n            },\r\n            {\r\n                src: \"photos/sd2.jpg\",\r\n                thumbnail: \"photos/sd2.jpg\",\r\n                thumbnailWidth: 4,\r\n                thumnailHeight: 3\r\n            },\r\n            {\r\n                src: \"photos/sd3.jpg\",\r\n                thumbnail: \"photos/sd3.jpg\",\r\n                thumbnailWidth: 4,\r\n                thumnailHeight: 3\r\n            },\r\n            {\r\n                src: \"photos/sd4.jpg\",\r\n                thumbnail: \"photos/sd4.jpg\",\r\n                thumbnailWidth: 3,\r\n                thumnailHeight: 4\r\n            },\r\n            {\r\n                src: \"photos/sd5.jpg\",\r\n                thumbnail: \"photos/sd5.jpg\",\r\n                thumbnailWidth: 4,\r\n                thumnailHeight: 3\r\n            },\r\n            {\r\n                src: \"photos/sd6.jpg\",\r\n                thumbnail: \"photos/sd6.jpg\",\r\n                thumbnailWidth: 4,\r\n                thumnailHeight: 3\r\n            },\r\n        ]\r\n    }\r\n];","import React from 'react';\r\nimport Gallery from 'react-grid-gallery';\r\n\r\nconst renderTravel = (destination) => {\r\n    return (\r\n        <div>\r\n            <h2 className=\"destination\">{destination.name}</h2>\r\n            <p>{destination.blurb}</p>\r\n            <p><strong>Dates:</strong> <span>{(new Date(destination.date.start)).toLocaleDateString()}</span> - <span>{(new Date(destination.date.end)).toLocaleDateString()}</span></p>\r\n            <div id=\"photo-panel\">\r\n                <h3>Photos</h3>\r\n                <div id=\"photos\">\r\n                    <Gallery enableImageSelection={false} images={destination.photos}></Gallery>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default function TravelPanel(props) {\r\n    const { selectedTravel } = props;\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h1>my travels</h1>\r\n            </div>\r\n            <div>\r\n                {selectedTravel ? renderTravel(selectedTravel) : <div className=\"space\">No destination selected.</div>}\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from 'react';\nimport './App.css';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport { data } from './data';\nimport TravelPanel from './TravelPanel';\n\nexport default class App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      selectedTravel: null,\n      center: {\n        lat: 39.833333,\n        lng: -98.583333\n      }\n    }\n  }\n\n  setTravel = (destination) => {\n    this.setState(prevState => ({\n      ...prevState,\n      center: prevState.location,\n      selectedTravel: destination\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"dashboard\">\n          <div id=\"map-display\">\n            <LoadScript\n              id=\"script-loader\"\n              googleMapsApiKey=\"AIzaSyCFgLIDxym8A2I5leKiPOLeaxWuRIApW1E\"\n            >\n              <GoogleMap\n                id='example-map'\n                mapContainerStyle={{\n                  width: '100%',\n                  height: '100%'\n                }}\n                zoom={4}\n                center={this.state.center}\n              >\n                {data.map(marker => {\n                  return <Marker key={marker.name}\n                    title={marker.name}\n                    position={marker.location}\n                    onClick={() => this.setTravel(marker)} />\n                })}\n              </GoogleMap>\n            </LoadScript>\n          </div>\n          <div id=\"travel-panel\">\n            <TravelPanel selectedTravel={this.state.selectedTravel} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}